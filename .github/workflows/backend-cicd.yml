name: Deploy Brahma Vastu Backend to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Copy production environment file
        run: |
          cp env.production .env.production
          echo "✅ Production environment file copied successfully"
          echo "📋 Environment variables loaded:"
          echo "- ENVIRONMENT: $(grep ENVIRONMENT .env.production | cut -d'=' -f2)"
          echo "- DATABASE_URL: $(grep DATABASE_URL .env.production | cut -d'=' -f2 | cut -c1-20)..."
          echo "- FRONTEND_ORIGINS: $(grep FRONTEND_ORIGINS .env.production | cut -d'=' -f2)"

      - name: Build Docker image
        run: docker build -t rushabhbackend04/bv_backend:latest -f ./Dockerfile .

      - name: Login to Docker Hub
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            echo "✅ Docker Hub login successful"
          else
            echo "⚠️ Docker Hub credentials not found. Skipping login and push."
            echo "Please set DOCKER_USERNAME and DOCKER_PASSWORD secrets in GitHub repository settings."
          fi

      - name: Publish Docker image
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            docker push rushabhbackend04/bv_backend:latest
            echo "✅ Docker image pushed successfully"
          else
            echo "⚠️ Skipping Docker push - credentials not available"
          fi

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quick Docker setup
        run: |
          # Fix Docker permissions quickly
          sudo chmod 666 /var/run/docker.sock || true
          sudo chown root:docker /var/run/docker.sock || true
          
          # Copy environment file
          cp env.production .env.production
          echo "✅ Quick setup completed"

      - name: Login to Docker Hub (if credentials available)
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            echo "✅ Docker Hub login successful"
          else
            echo "⚠️ Using local Docker setup"
          fi

      - name: Fast Docker cleanup
        run: |
          echo "🧹 Fast cleanup of old resources..."
          
          # Stop and remove only related containers (faster)
          docker stop bv-backend-container bv-mysql-container || true
          docker rm bv-backend-container bv-mysql-container || true
          
          # Remove only our specific image (faster than system prune)
          docker rmi rushabhbackend04/bv_backend:latest || true
          
          echo "✅ Fast cleanup completed"

      - name: Start MySQL and initialize
        run: |
          echo "🗄️ Starting MySQL database..."
          docker run -d \
            --name bv-mysql-container \
            --restart unless-stopped \
            -e MYSQL_ROOT_PASSWORD=BvR00t@1234 \
            -e MYSQL_DATABASE=brahmavastu \
            -e MYSQL_USER=root \
            -e MYSQL_PASSWORD=BvR00t@1234 \
            -e MYSQL_INITDB_SKIP_TZINFO=1 \
            -p 3306:3306 \
            -v bv-mysql-data:/var/lib/mysql \
            mysql:8.0 \
            --innodb-buffer-pool-size=64M \
            --max-connections=50 \
            --skip-log-bin
          
          echo "⏳ Waiting for MySQL..."
          timeout 60 bash -c 'until docker exec bv-mysql-container mysqladmin ping --silent; do sleep 2; done'
          
          echo "🗄️ Initializing database..."
          docker exec bv-mysql-container mysql -u root -pBvR00t@1234 -e "CREATE DATABASE IF NOT EXISTS brahmavastu;"
          
          echo "✅ MySQL ready!"

      - name: Get Docker image
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "📥 Pulling Docker image..."
            docker pull rushabhbackend04/bv_backend:latest
            echo "✅ Image pulled"
          else
            echo "🔨 Building image locally..."
            docker build -t rushabhbackend04/bv_backend:latest -f ./Dockerfile .
            echo "✅ Image built"
          fi

      - name: Run Alembic migrations
        run: |
          echo "🔄 Running database migrations..."
          docker run --rm \
            --network host \
            --env-file .env.production \
            rushabhbackend04/bv_backend:latest \
            sh -c "
              echo 'Running Alembic upgrade...'
              alembic upgrade head
              echo 'Migrations completed!'
            "
          echo "✅ Database migrations completed!"

      - name: Start application
        run: |
          echo "🚀 Starting application..."
          docker run -d \
            --name bv-backend-container \
            --restart unless-stopped \
            -p 8000:8000 \
            --env-file .env.production \
            -v /var/log/bv-backend:/app/logs \
            -v /var/www/bv-backend/uploads:/app/uploads \
            --network host \
            rushabhbackend04/bv_backend:latest
          
          echo "⏳ Waiting for application..."
          timeout 30 bash -c 'until curl -f http://localhost:8000/health 2>/dev/null; do sleep 1; done'
          echo "✅ Application ready!"

      - name: Deployment complete
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "✅ API: http://localhost:8000"
          echo "✅ Health: http://localhost:8000/health"
          echo "✅ Database: MySQL on port 3306"
          echo "✅ Migrations: Completed"
